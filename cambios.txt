void disponer_con_backtracking(Nivel* nivel, Mapa* mapa) {
    /* A cargo de la/el estudiante */
    int cantidad_casillas = mapa->alto * mapa->ancho;
    Coordenada posiciones_validas_torre[cantidad_casillas];
    
    int cant_validas = posiciones_validas(posiciones_validas_torre, mapa->casillas, mapa->alto, mapa->ancho);

    int bitmap[cant_validas]; // Bitmap de coordenadas bitmap (0 para false, 1 para true)
    Pila *pila = pila_crear();
    int indiceActual = 0;
    
    // Inicializamos el bitmap a 0 (false)
    for (int i = 0; i < cant_validas; i++) {
        bitmap[i] = 0; // 0 representa 'false' (no usado)
    }
    int funciono = 0;
    while (!funciono) { 
        // Paso 1: Intentar agregar una nueva coordenada al pila
        if (pila->ultimo+1 < mapa->cant_torres) { // Asumiendo que pila_tamanio() existe y es preferible a pila->ultimo
                                     // Si no, puedes usar (pila->ultimo + 1 < k) como antes
            int encontrado = 0; // 0 para 'false'
            
            // Buscamos la próxima coordenada disponible
            for (int i = indiceActual; i < cant_validas; i++) {
                if (bitmap[i] == 0) { // Si no está usada (used[i] es 0)
                    pila_apilar(pila, posiciones_validas_torre[i]);
                    bitmap[i] = 1; // 1 representa 'true' (usada)
                    indiceActual = i + 1;
                    encontrado = 1; // 1 para 'true'
                    break;
                }
            }

            if (encontrado == 0) { // Si no se encontró una nueva coordenada
                // No hay más coordenadas disponibles, hacemos backtrack
                // que pasa si ninguna disposicion gana??
                if (pila_es_vacia(pila)) {
                    pila_destruir(pila);
                    printf("no hay ninguna solucion\n");
                    funciono = 1;
                }
                // Sacamos la última coordenada del pila
                Coordenada ultima = pila_tope(pila); // Asumiendo que pila_tope() devuelve el valor y no un puntero
                pila_desapilar(pila);
                
                // Buscamos su índice
                int ultimo_indice = buscar_indice(posiciones_validas_torre, cant_validas, ultima);
                // Es importante que buscar_indice maneje correctamente el caso de no encontrarlo,
                // aunque en este flujo, la coordenada 'last' siempre debería estar en 'coords'.
                if (ultimo_indice != -1) { // Siempre verificar el resultado de buscar_indice
                   bitmap[ultimo_indice] = 0; // 0 para 'false'
                }
                indiceActual = ultimo_indice + 1;
            }
        }
        // Paso 2: Tenemos una combinación completa
        else {
            //aca evaluamos las torres en el pila, si funciona, terminar, sino: 
            pila_imprimir(pila);
            Nivel nivelCopia = copiar_nivel(*nivel);
            Mapa mapaCopia = copiar_mapa(*mapa);
            for (int colocadas = 0; colocadas < mapa->cant_torres; colocadas++) {
                int nueva_torre_x = pila->datos[colocadas].x;
                int nueva_torre_y = pila->datos[colocadas].y;
                colocar_torre(&mapaCopia, nueva_torre_x, nueva_torre_y, colocadas);
            }
            if(simular_nivel_rapido(&nivelCopia, &mapaCopia) == 1){
                funciono = 1;
                *mapa = copiar_mapa(mapaCopia);
                pila_destruir(pila);
            }            // Hacemos backtrack si la combinación no es válida

            Coordenada ultima = pila_tope(pila);
            pila_desapilar(pila);
            
            int ultimo_indice = buscar_indice(posiciones_validas_torre, cant_validas, ultima);
            if (ultimo_indice != -1) {
                bitmap[ultimo_indice] = 0; // 0 para 'false'
            }
            indiceActual = ultimo_indice + 1;
        }
    }
}

Mapa* copiar_mapa(Mapa* original) {
    Mapa* copia = malloc(sizeof(Mapa));
    if (!copia) {
        printf("Error: No se pudo asignar memoria para la copia del mapa.\n");
        return NULL;
    }

    *copia = *original;

    copia->torres = malloc(original->cant_torres * sizeof(Coordenada));
    if (!copia->torres) {
        printf("Error: No se pudo asignar memoria para las torres.\n");
        free(copia);
        return NULL;
    }
    memcpy(copia->torres, original->torres, original->cant_torres * sizeof(Coordenada));

    copia->casillas = malloc(original->alto * sizeof(TipoCasilla*));
    if (!copia->casillas) {
        printf("Error: No se pudo asignar memoria para las casillas.\n");
        free(copia->torres);
        free(copia);
        return NULL;
    }
    for (int i = 0; i < original->alto; i++) {
        copia->casillas[i] = malloc(original->ancho * sizeof(TipoCasilla));
        if (!copia->casillas[i]) {
            printf("Error: No se pudo asignar memoria para las casillas en la fila %d.\n", i);
            for (int j = 0; j < i; j++) {
                free(copia->casillas[j]);
            }
            free(copia->casillas);
            free(copia->torres);
            free(copia);
            return NULL;
        }
        memcpy(copia->casillas[i], original->casillas[i], original->ancho * sizeof(TipoCasilla));
    }

    return copia;
}Nivel* copiar_nivel(Nivel* original) {
    // Asignar memoria para la copia
    Nivel* copia = malloc(sizeof(Nivel));
    if (!copia) {
        printf("Error: No se pudo asignar memoria para la copia del nivel.\n");
        return NULL;
    }

    // Copiar valores simples
    *copia = *original;

    // Copiar enemigos
    copia->enemigos = malloc(sizeof(Enemigos));
    if (!copia->enemigos) {
        printf("Error: No se pudo asignar memoria para los enemigos.\n");
        free(copia);
        return NULL;
    }
    *copia->enemigos = *original->enemigos;

    int cant = original->enemigos->cantidad;

    copia->enemigos->posiciones = malloc(cant * sizeof(Coordenada));
    if (!copia->enemigos->posiciones) {
        printf("Error: No se pudo asignar memoria para las posiciones de los enemigos.\n");
        free(copia->enemigos);
        free(copia);
        return NULL;
    }
    memcpy(copia->enemigos->posiciones, original->enemigos->posiciones, cant * sizeof(Coordenada));

    copia->enemigos->vida = malloc(cant * sizeof(int));
    if (!copia->enemigos->vida) {
        printf("Error: No se pudo asignar memoria para las vidas de los enemigos.\n");
        free(copia->enemigos->posiciones);
        free(copia->enemigos);
        free(copia);
        return NULL;
    }
    memcpy(copia->enemigos->vida, original->enemigos->vida, cant * sizeof(int));

    copia->enemigos->activos = malloc(cant * sizeof(int));
    if (!copia->enemigos->activos) {
        printf("Error: No se pudo asignar memoria para los enemigos activos.\n");
        free(copia->enemigos->vida);
        free(copia->enemigos->posiciones);
        free(copia->enemigos);
        free(copia);
        return NULL;
    }
    memcpy(copia->enemigos->activos, original->enemigos->activos, cant * sizeof(int));

    // Copiar camino
    copia->camino = malloc(sizeof(Camino));
    if (!copia->camino) {
        printf("Error: No se pudo asignar memoria para el camino.\n");
        free(copia->enemigos->activos);
        free(copia->enemigos->vida);
        free(copia->enemigos->posiciones);
        free(copia->enemigos);
        free(copia);
        return NULL;
    }
    *copia->camino = *original->camino;

    copia->camino->posiciones = malloc(original->camino->largo_camino * sizeof(Coordenada));
    if (!copia->camino->posiciones) {
        printf("Error: No se pudo asignar memoria para las posiciones del camino.\n");
        free(copia->camino);
        free(copia->enemigos->activos);
        free(copia->enemigos->vida);
        free(copia->enemigos->posiciones);
        free(copia->enemigos);
        free(copia);
        return NULL;
    }
    memcpy(copia->camino->posiciones, original->camino->posiciones, original->camino->largo_camino * sizeof(Coordenada));

    return copia;
}

#include "pila.h"

Pila *pila_crear(){
	Pila *nueva = malloc(sizeof(Pila));
	nueva->ultimo = -1;
	return nueva;
}
int pila_es_vacia(Pila* pila){
	if (pila->ultimo == -1){
		return 1;
	}
	return 0;
}

Coordenada pila_tope(Pila* pila){
	if(pila->ultimo != -1){
		return pila->datos[pila->ultimo];
	}
        Coordenada vacia;
        vacia.x = -1;
        vacia.y = -1;
	return vacia;
}
void pila_apilar(Pila* pila, Coordenada num){
	if(pila->ultimo >= MAX_PILA-1){
		printf("error\n");
	}else{
		copiar_coordenada(&pila->datos[pila->ultimo+1], &num);
		pila->ultimo++;
	}
}
void pila_desapilar(Pila * pila){
	pila->ultimo -=1;
}

void pila_imprimir(Pila * pila){
	for(int i = 0; i<=pila->ultimo; i++){
		printf("x: %i y: %i\n", pila->datos[i].x, pila->datos[i].y);
	}
	printf("\n");
}

void pila_destruir(Pila * pila){
	free(pila);
}

void copiar_coordenada(Coordenada *primera, Coordenada *segunda){
    primera->x = seagunda->x;
    primera->y = segunda->y;
}
